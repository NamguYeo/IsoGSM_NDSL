#!/bin/sh
set -x
#
#  creates pgb, averaging and ftp archive script (post.sh) and
#  execute/submit. with this method, post.sh can run independently
#  from any other job, allowing parallel processing with forecast.
#  this script is written for amip run
#
#  $1 ... if 'batch' then post.sh runs as a separate process, else
#         regular serial execution
#  $2 ... directory where execution is taking place.  Since this job
#         execute as a separate process, it needs to know where to
#         get files.
#  $3 ... year, month, day, hour, starting forecast hour, ending forecast
#         hour, surface program execution interval, separated by ':'
#  $4 ... flux file interval
#  $5 ... sigma file interval
#  $6 ... archive directory of the target ftp
#  $7 ... ftp ip address
#  $8 ... ftp protocol
#
if [ $# -ne 8 -a $# -ne 5 ] ; then
        echo $1
        echo $2
        echo $3
        echo $4
        echo $5
        echo $6
        echo $7
        echo $8
        echo post argument error
        exit 8
fi
#
#  note that the following variables must be passed as environmental variables 
#  otherwise it uses defaults defined in this script
#
#  LIST_OF_FILES
#  FILES_TO_BE_KEPT
#  FILES_TO_BE_AVERAGED
#  FTP_SIG
#  FTP_SFC
#  FTP_ZNL
#  FTP_FLX
#  FTP_DIA
#  FTP_KEN
#  FTP_PGB
#  FTP_SGB
#  FTP_FCSTOUT
#  FTP_EXTVARS
#  RMAVRG
#  VARIANCE
#  EXTVARS
#
BATCH=$1
EXECSUBDIR=$2
YYYY=`echo $3 | cut -d':' -f1`
MM=`echo $3 | cut -d':' -f2`
DD=`echo $3 | cut -d':' -f3`
HH=`echo $3 | cut -d':' -f4`
FHS=`echo $3 | cut -d':' -f5`
FHE=`echo $3 | cut -d':' -f6`
INTSFCX=`echo $3 | cut -d':' -f7`
INTPOST=$4
INTSIG=$5
FTPDIR=$6
FTPADDR=$7
FTP_PROTOCOL=$8
#
LIST_OF_FILES=${LIST_OF_FILES:='sig sfc znl flx dia ken pgb sgb fcstout extvars'}
FILES_TO_BE_KEPT=$FILES_TO_BE_KEPT
FILES_TO_BE_AVERAGED=$FILES_TO_BE_AVERAGED
FTP_SIG=${FTP_SIG:='no'}
FTP_SFC=${FTP_SFC:='no'}
FTP_ZNL=${FTP_ZNL:='no'}
FTP_FLX=${FTP_FLX:='no'}
FTP_DIA=${FTP_DIA:='no'}
FTP_KEN=${FTP_KEN:='no'}
FTP_PGB=${FTP_PGB:='no'}
FTP_SGB=${FTP_SGB:='no'}
FTP_FCSTOUT=${FTP_FCSTOUT:='no'}
FTP_EXTVARS=${FTP_EXTVARS:='no'}
RMAVRG=${RMAVRG:='yes'}
VARIANCE=${VARIANCE:='no'}
EXTVARS=${EXTVARS:='no'}
#
cat <<EOF >seddat_post
s?%EXECSUBDIR%?$EXECSUBDIR?g
s?%YYYY%?$YYYY?g
s?%MM%?$MM?g
s?%DD%?$DD?g
s?%HH%?$HH?g
s?%FHS%?$FHS?g
s?%FHE%?$FHE?g
s?%INTSFCX%?$INTSFCX?g
s?%INTPOST%?$INTPOST?g
s?%INTSIG%?$INTSIG?g
s?%FTPADDR%?$FTPADDR?g
s?%FTPDIR%?$FTPDIR?g
s?%LIST_OF_FILES%?$LIST_OF_FILES?g
s?%FILES_TO_BE_KEPT%?$FILES_TO_BE_KEPT?g
s?%FILES_TO_BE_AVERAGED%?$FILES_TO_BE_AVERAGED?g
s?%FTP_PROTOCOL%?$FTP_PROTOCOL?g
s?%FTP_SIG%?$FTP_SIG?g
s?%FTP_SFC%?$FTP_SFC?g
s?%FTP_ZNL%?$FTP_ZNL?g
s?%FTP_FLX%?$FTP_FLX?g
s?%FTP_DIA%?$FTP_DIA?g
s?%FTP_KEN%?$FTP_KEN?g
s?%FTP_PGB%?$FTP_PGB?g
s?%FTP_SGB%?$FTP_SGB?g
s?%FTP_FCSTOUT%?$FTP_FCSTOUT?g
s?%FTP_EXTVARS%?$FTP_EXTVARS?g
s?%RMAVRG%?$RMAVRG?g
s?%VARIANCE%?$VARIANCE?g
s?%EXTVARS%?$EXTVARS?g
EOF
#
#  finalize post.sh.  add header if necessary.
#
rm post.f$FHS-$FHE.sh 2>/dev/null
#if [ -s /rhome/yeong/test/svrtest/gsm_runs/runscr/hs-@HOST_NAME@.h ] ; then
#	sed -f seddat_post /rhome/yeong/test/svrtest/gsm_runs/runscr/hs-@HOST_NAME@.h >post.f$FHS-$FHE.sh
#fi
sed -f seddat_post /rhome/yeong/test/svrtest/gsm_runs/runscr/post.is >>post.f$FHS-$FHE.sh
chmod a+x post.f$FHS-$FHE.sh
#
if [ $BATCH = batch ] ; then
	if [ -z "ssh -f compute-1-31" ] ; then
		nohup ./post.f$FHS-$FHE.sh >post.f$FHS-$FHE.out 2>&1 &
	elif [ "ssh -f compute-1-31" = bsub ] ; then
		ssh -f compute-1-31 < post.f$FHS-$FHE.sh >post.f$FHS-$FHE.out 2>&1
	else
		here_dir=`pwd`
		ssh -f compute-1-31 $here_dir/post.f$FHS-$FHE.sh >post.f$FHS-$FHE.out 2>&1
	fi
else
	./post.f$FHS-$FHE.sh >post.f$FHS-$FHE.out 2>&1 || exit 8
fi
#
# clean up post script and output
#
rc=0
for filex in $FILES_TO_BE_KEPT
do
	if [ $filex = post ] ; then
		rc=1
	fi
done
if [ $rc -eq 0 ] ; then
	inc=`expr $FHE - $FHS`
	if [ $inc -lt 0 ] ; then
		inc=0
	fi
	FHM=`expr $FHS - $inc`
	rm  r_post.f$FHM-$FHS.sh r_post.f$FHM-$FHS.out
fi
rm seddat_post
exit 0
