#!/bin/sh
#PBS -l nodes=1:ppn=36
 cd \$PBS_O_WORKDIR
 export LANG=C
#
ulimit -s unlimited
set -ax
#
#  Downscaling with observed boundary condition
#
# ---------------  User changeable parameters  -----------------
#
# run directory name
#
RUNNAME=R_000
#
FCST_NPES=36
#
#  Initial year, month, day, hour
#
YYYYS=1948
MMS=01
DDS=01
HHS=00
#
#  ending year, month, day, hour
#
YYYYE=1948
MME=02
DDE=01
HHE=00
#
#   rsm domain and resolution specification
# 
#
#  specification of initial condition
#
INITIAL_SIG_PLATFORM=coaps.fsu.edu
INITIAL_SIG_FTP=ftp
INITIAL_SIG_GLB=/pub/ECPC/kana/r1/1940/194801/sig.1948010100.ieee
INITIAL_SFC_GLB=/pub/ECPC/kana/r1/1940/194801/sfc.1948010103.ieee
INPUT_RESOLUTION=t62k28
INITIAL_SFC_FILE_TYPE=osu1
#
#  Base field analysis sigma files
#
BASE_SIG_PLATFORM=coaps.fsu.edu
BASE_SIG_FTP=ftp
BASE_SIG=/pub/ECPC/kana/r1/\$YYYYDD/\$YYYYF\$MMF/sig.\$YYYYF\$MMF\$DDF\$HHF.ieee
BASE_RESOLUTION=t62k28
#
# sst/ice/snow
#
SST_PLATFORM=coaps.fsu.edu
SST_FTP=ftp
SST_ANL=/pub/ECPC/kana/sfcanl/\$YYYY/sst.grib
SST_ANL_T0=/pub/ECPC/kana/sfcanl/$YYYYS/sst.grib
#
ICE_PLATFORM=coaps.fsu.edu
ICE_FTP=ftp
ICE_ANL=/pub/ECPC/kana/sfcanl/\$YYYY/ice.grib
ICE_ANL_T0=/pub/ECPC/kana/sfcanl/$YYYYS/ice.grib
#
SNO_PLATFORM=
SNO_FTP=
SNO_ANL=
SNO_ANL_T0=
SCV_PLATFORM=
SCV_FTP=
SCV_ANL=
SCV_ANL_T0=
#
#  output for archive
#
ARCHIVE_PLATFORM=kana@fubuki.ucsd.edu
ARCHIVE_FTP_PROTOCOL=sftp
ARCHIVE_DIR=/fubu4/kana/@HOST_NAME@/$RUNNAME/\$YYYY
#
#  rfcst control statement
#
#  INCHOUR is forecast hour by one rfcst execution
#
DELTAT_REG_SPRING=@DELTAT_REG_SPRING@
DELTAT_REG_SUMMER=@DELTAT_REG_SUMMER@
DELTAT_REG_FALL=@DELTAT_REG_FALL@
DELTAT_REG_WINTER=@DELTAT_REG_WINTER@
NESTING_HOUR=6
SWHR_REG=1
LWHR_REG=1
INCHOUR=24
INTSFCX=24
INTPOST=1
INTPGB=3
INTRESTART=24
FCST_RESTART=yes
#
#  --------- below for expert only ----------------------------------
#
#  The following applies for the base field given by forecast hour
#  (mostly C2R case), and intend to start this forcast from the middle
#  of the base filed forecast (default is to start from the beginning).
#
BASE_INI_YEAR=$YYYYS
BASE_INI_MONTH=$MMS
BASE_INI_DAY=$DDS
BASE_INI_HOUR=$HHS
FHADJ=`/rhome/yeong/test/svrtest/libs/etc/inchour \
				$BASE_INI_YEAR \
				$BASE_INI_MONTH \
				$BASE_INI_DAY \
				$BASE_INI_HOUR \
				$YYYYS $MMS $DDS $HHS | \
	sed 's/ *//g'`
#
#  choice of archive variables
#
FTP_R_SIGIT=yes
FTP_R_SIGITDT=yes
FTP_R_SFC=yes
FTP_R_PGB=yes
FTP_R_FLX=no
FTP_R_FCSTOUT=no
FTP_R_EXTVARS=no
FTP_R_DIA=no
export FTP_R_SIGIT FTP_R_SIGITDT FTP_R_SFC FTP_R_FLX FTP_R_PGB \
       FTP_R_FCSTOUT FTP_R_EXTVARS FTP_R_DIA
#
#  by changing the following, you can keep the files
#
FILES_TO_BE_KEPT='r_sigit r_sigitdt r_sfc'
export FILES_TO_BE_KEPT
#
#  you can specify any grib file for averaging
#
FILES_TO_BE_AVERAGED=
#FILES_TO_BE_AVERAGED='r_pgb'
export FILES_TO_BE_AVERAGED
#
# CHUNK_QSUB=yes to execute the integration piece meal to avoid
# error exit due to time limit.  Do not forget to use the correct
# script name to be resubmit
# name
#
CHUNK_QSUB=no
if [ $CHUNK_QSUB = yes ] ; then
        SUBMIT_SCRIPT=/rhome/yeong/test/svrtest/gsm_runs/rsim
        SUBMIT=ssh -f compute-1-31
        CHUNK_QSUB_INT=$INCHOUR
fi
#
# You may modify EXPDIR to /tmp directory and keep this
# scripts on your permanent disk.
#
EXPDIR=/rhome/yeong/test/svrtest/gsm_runs/$RUNNAME
#
DELETE_BASE=yes
#
# -------  do not change below  -------------------------------------
#
mkdir -p $EXPDIR 2>/dev/null
scrnam=`echo $0 | sed 's?.*/??g'`
cp $0 $EXPDIR/0LOG.$scrnam
ls -l /rhome/yeong/test/svrtest/gsm/bin >$EXPDIR/0LOG.bindates
cd $EXPDIR
#
#
CPROJ=0
CTRUTH=0
CORIENT=0
CDELX=0
CDELY=0
CCENLAT=0
CCENLON=0
CLFTGRD=0
CBTMGRD=0
#
LIST_OF_FILES='r_sigit r_sigitdt r_sfc r_flx r_pgb rfcstout r_extvars r_dia'
export LIST_OF_FILES
#
# forecast hour length
#
FHLEN=`/rhome/yeong/test/svrtest/libs/etc/inchour $YYYYS $MMS $DDS $HHS $YYYYE $MME $DDE $HHE | \
			sed 's/ *//g'`
#
YYYY=$YYYYS
#
cd $EXPDIR
#
# Regional domain specification (parm data to be used by coldstart
# as well as several other scripts later).
#
cat >rsm.parm <<EOF
 &NAMLOC
 RPROJ    = $RPROJ,
 RTRUTH   = $RTRUTH,
 RORIENT  = $RORIENT,
 RDELX    = $RDELX,
 RDELY    = $RDELY,
 RCENLAT  = $RCENLAT,
 RCENLON  = $RCENLON,
 RLFTGRD  = $RLFTGRD,
 RBTMGRD  = $RBTMGRD,
 CPROJ    = $CPROJ,
 CTRUTH   = $CTRUTH,
 CORIENT  = $CORIENT,
 CDELX    = $CDELX,
 CDELY    = $CDELY,
 CCENLAT  = $CCENLAT,
 CCENLON  = $CCENLON,
 CLFTGRD  = $CLFTGRD,
 CBTMGRD  = $CBTMGRD,
/
EOF
#
#  refresh log file
#
rm ERROR.out 2>/dev/null
#
#  rfcst year loop
#
while [ $YYYY -le $YYYYE ] ; do
	#
	EXECDIR=$EXPDIR/$YYYY
	mkdir -p $EXECDIR 2>/dev/null
	cd $EXECDIR
	echo "`date` $0: started" >>ERROR.out
	#
	#  Find ENDHOUR which is different for each year
	#
	if [ $YYYY -eq $YYYYS ] ; then
		if [ $YYYYE -gt $YYYYS ] ; then
			yyyyp=`expr $YYYY + 1`
			ENDHOUR=`/rhome/yeong/test/svrtest/libs/etc/inchour $YYYYS $MMS $DDS $HHS \
							$yyyyp 01 01 00 | sed 's/ *//g'`
		else
			ENDHOUR=`/rhome/yeong/test/svrtest/libs/etc/inchour $YYYYS $MMS $DDS $HHS $YYYYE $MME $DDE $HHE | \
				sed 's/ *//g'`
		fi
		MM=$MMS
		DD=$DDS
		HH=$HHS
	elif [ $YYYY -gt $YYYYS -a $YYYY -lt $YYYYE ] ; then
		mody4=`expr $YYYY \% 4`
		ENDHOUR=`expr 24 \* 365`
		if [ $mody4 -eq 0 -a $YYYY -ne 1900 ] ; then
			ENDHOUR=`expr $ENDHOUR + 24`
		fi
		MM=01
		DD=01
		HH=00
	else
		ENDHOUR=`/rhome/yeong/test/svrtest/libs/etc/inchour $YYYYE 01 01 00 $YYYYE $MME $DDE $HHE | \
			sed 's/ *//g'`
		MM=01
		DD=01
		HH=00
	fi
	#
	#  Find forecast hour of the current $YYYY directory,
	#
	#  1. if it is equal to ENDHOUR, go to next year.
	#  2. if there is no r_sig_initial file, take the r_sigit
	#     file of the previous year, reset initial dates to Jan. 1,
	#     00Z of the current year and set forecast hour to zero.
	#  3. if it is very beginning, return -999.  this requires
	#     calling coldstart script to get the cold start condition.
	#
	h=`/rhome/yeong/test/svrtest/gsm_runs/runscr/r_reini $YYYY $YYYYS noa1` || exit 8 
	if [ $h -eq $ENDHOUR ] ; then
		YYYY=`expr $YYYY + 1`
		continue
	fi
	#
	#  cold start
	#
	cp ../rsm.parm .
	if [ $h -eq -999 ] ; then
		h=0
		#
		#   fetch global initial condition sig and sfc files
		#
		/rhome/yeong/test/svrtest/gsm_runs/runscr/fetchfile  \
				$INITIAL_SIG_GLB ./initial_sig_glb \
				$INITIAL_SIG_FTP $INITIAL_SIG_PLATFORM || exit 8
		/rhome/yeong/test/svrtest/gsm_runs/runscr/fetchfile  \
				$INITIAL_SFC_GLB ./initial_sfc_glb \
				$INITIAL_SIG_FTP $INITIAL_SIG_PLATFORM || exit 8
		FILE_FORMAT=`echo $INITIAL_SIG_GLB | sed 's/.*\.//g'`
		if [ "$FILE_FORMAT" != ascii -a \
			"$FILE_FORMAT" != asc -a  \
			"$FILE_FORMAT" != ieee -a  \
			"$FILE_FORMAT" != ieee_dp -a \
			"$FILE_FORMAT" != ieee_sgi -a \
			"$FILE_FORMAT" != cray ] ; then
		FILE_FORMAT=bin
	fi
	# 
	#  Convert to native format
    #
    /rhome/yeong/test/svrtest/libs/etc/scnvrt gsm $INITIAL_SFC_FILE_TYPE \
      62:192:94:28 \
      $YYYY:$MM:$DD:$HH:0 \
      $FILE_FORMAT:bin \
      initial_sig_glb:initial_sfc_glb \
      sigit:sfci || exit 8
		# 
		#  interpolate to regional grid
    #
		if [ ! -s r_sigit.ft00 -a ! -s r_sfc.ft00 ] ; then
			/rhome/yeong/test/svrtest/gsm_runs/runscr/r_inpg $INITIAL_SFC_FILE_TYPE \
				sigit:sfci r_sigit.ft00:r_sfc.ft00 || exit 8
		fi
		cp r_sigit.ft00 r_sigit
		cp r_sigit.ft00 r_sigitdt
		cp r_sfc.ft00 r_sfci
	fi
	echo "Starting simulation for year YYYY=$YYYY fhour=$h" >>ERROR.out
	#
	#  copy regional orography to current dirctory
	#
	if [ $h -eq 0 -a $YYYY -gt $YYYYS ] ; then
		cp ../$YYYYS/r_slmsk .
		cp ../$YYYYS/r_orogrd .
		cp ../$YYYYS/r_mtnvar .
		cp ../$YYYYS/r_oroggd .
		cp ../$YYYYS/r_smooth_oroggd .
		cp ../$YYYYS/nfdr.restart .
	fi
	if [ $h -eq 0 -a $YYYY -eq $YYYYS ] ; then
		#
		#  run sfc0
		#
		#  fetch fixed fields
		#
		for fld in sst sno scv ice
		do
			FLD=`echo $fld | tr '[a-z]' '[A-Z]'`
			anl_t0=\$${FLD}_ANL_T0
			anl_t0=`eval echo $anl_t0`
			anl_t0=`eval echo $anl_t0`
			ftp=\$${FLD}_FTP
			ftp=`eval echo $ftp`
			platform=\$${FLD}_PLATFORM
			platform=`eval echo $platform`
			if [ -n "$anl_t0" ] ; then
				if [ ! -s ./$fld.grib  ] ; then
					if [ $ftp != ln ] ; then
						/rhome/yeong/test/svrtest/gsm_runs/runscr/fetchfile  \
							$anl_t0 ./$fld.grib \
							$ftp $platform || exit 8
							eval ${FLD}_GRB_T0=$EXECDIR/$fld.grib
					else
						eval ${FLD}_GRB_T0=$anl_t0
					fi
				else
					eval ${FLD}_GRB_T0=$EXECDIR/$fld.grib
				fi
			else
				eval ${FLD}_GRB_T0=
			fi
		done
		export SST_GRB_T0 SNO_GRB_T0 SCV_GRB_T0 ICE_GRB_T0
		/rhome/yeong/test/svrtest/gsm_runs/runscr/rsfc0 r_sfci r_sfco $INITIAL_SFC_FILE_TYPE || exit 8
		cp r_sfco r_sfci
	fi
	# 
	#  forecast hour loop
	#
	h0=$h
	while [ $h -lt $ENDHOUR ];do
		h=`expr $h`
		h2dig=$h
		if [ $h2dig -lt 10 ];then h2dig=0$h2dig;fi
		hx=`expr $h + $INCHOUR`
		if [ $hx -gt $ENDHOUR ] ; then
			hx=$ENDHOUR
		fi
		if [ $hx -lt 10 ];then hx=0$hx;fi
		#
		#  link base field to the file name the rsm expects  
		#
		fhend=$INCHOUR
		if [ $fhend -lt $NESTING_HOUR ] ; then
			fhend=$NESTING_HOUR
		fi
		fh=0
		while [ $fh -le $fhend ] ; do
			fhx=`expr $fh + $h`
			fhx=`expr \( $fhx \/ $NESTING_HOUR \) \* $NESTING_HOUR`
			/rhome/yeong/test/svrtest/libs/etc/incdte $YYYY $MM $DD $HH $fhx  >dteout$$ || exit 8
			read YYYYF  MMF  DDF  HHF  <dteout$$ ; rm dteout$$
			if [ ! -s base.$YYYYF$MMF$DDF$HHF ] ; then
				YYYYDD=`echo $YYYYF | cut -c 1-3`0
				FILE_FORMAT=`echo $BASE_SIG | sed 's/.*\.//g'`
				if [ "$FILE_FORMAT" != ascii -a \
						"$FILE_FORMAT" != asc -a \
						"$FILE_FORMAT" != ieee -a \
						"$FILE_FORMAT" != ieee_dp -a \
						"$FILE_FORMAT" != ieee_sgi -a \
						"$FILE_FORMAT" != cray ] ; then
					FILE_FORMAT=bin
				fi
				base_sig=`eval echo $BASE_SIG`
				/rhome/yeong/test/svrtest/gsm_runs/runscr/fetchfile  \
					$base_sig ./base_sig \
					$BASE_SIG_FTP $BASE_SIG_PLATFORM || exit 8
				touch dummy
				/rhome/yeong/test/svrtest/libs/etc/scnvrt gsm $INITIAL_SFC_FILE_TYPE \
					62:192:94:28 \
					$YYYYF:-1:-1:-1:-1 \
					$FILE_FORMAT:bin \
					base_sig:dummy \
					base.$YYYYF$MMF$DDF$HHF:dummy1 || exit 8
			fi
			#
			#  check consistency of file date and file name
			#
			/rhome/yeong/test/svrtest/libs/etc/date base.$YYYYF$MMF$DDF$HHF > date.$$ || exit 8
			read FHV MMV DDV YYV HHV <date.$$ ; rm date.$$
			/rhome/yeong/test/svrtest/libs/etc/incdte $YYV $MMV $DDV $HHV $FHV  >dteout$$ || exit 8
			read YYV MMV DDV HHV <dteout$$ ; rm dteout$$
			if [ $HHV != $HHF -o $MMV != $MMF -o $DDV != $DDF -o \
					$YYV != $YYYYF ] ; then
				echo "Inconsistent date on file base.$YYYYF$MMF$DDF$HHF"
				echo "The date record is $YYV $MMV $DDV $HHV at fh=$FHV"
				exit 8
			fi
			fh=`expr $fh + $NESTING_HOUR`
		done
		#
		#  Execute forecast
		#
		for fld in sst sno scv ice
		do
			FLD=`echo $fld | tr '[a-z]' '[A-Z]'`
			anl=\$${FLD}_ANL
			anl=`eval echo $anl`
			anl=`eval echo $anl`
			ftp=\$${FLD}_FTP
			ftp=`eval echo $ftp`
			platform=\$${FLD}_PLATFORM
			platform=`eval echo $platform`
			if [ -n "$anl" ] ; then
				if [ ! -s ./$fld.grib ] ; then
					if [ $ftp != ln ] ; then
						/rhome/yeong/test/svrtest/gsm_runs/runscr/fetchfile  \
							$anl ./$fld.grib \
							$ftp $platform || exit 8
							eval ${FLD}_GRB=$EXECDIR/$fld.grib
					else
						eval ${FLD}_GRB=$anl
					fi
				else
					eval ${FLD}_GRB=$EXECDIR/$fld.grib
				fi
			else
				eval ${FLD}_GRB=
			fi
		done
		export SST_GRB SNO_GRB SCV_GRB ICE_GRB
                /rhome/yeong/test/svrtest/libs/etc/incdte $YYYY $MM $DD $HH $h  >dteout$$ || exit 8
                read YYYYF MMF DDF HHF  <dteout$$ ; rm dteout$$
                if [ $MMF = 12 -o $MMF = 01 -o $MMF = 02 ] ; then
                        DELTAT_REG=$DELTAT_REG_WINTER
                elif [ $MMF = 03 -o $MMF = 04 -o $MMF = 05 ] ; then
                        DELTAT_REG=$DELTAT_REG_SPRING
                elif [ $MMF = 06 -o $MMF = 07 -o $MMF = 08 ] ; then
                        DELTAT_REG=$DELTAT_REG_SUMMER
                elif [ $MMF = 09 -o $MMF = 10 -o $MMF = 11 ] ; then
                        DELTAT_REG=$DELTAT_REG_FALL
                fi
                export DELTAT_REG
		/rhome/yeong/test/svrtest/gsm_runs/runscr/r_fcstparm $INCHOUR $ENDHOUR \
					$DELTAT_REG $NESTING_HOUR $INTPOST $INTPGB $INTSFCX $INTRESTART || exit 8
		#
		export MP_SET_NUMTHREADS
		/rhome/yeong/test/svrtest/gsm_runs/runscr/r_fcst $h $hx $INTPOST $INCHOUR || exit 8
		#
		cp r_sigit.ft$hx r_sigit || exit 8
		cp r_sigitdt.ft$hx r_sigitdt || exit 8
		cp r_sfc.ft$hx r_sfci || exit 8
		if [ -s r_rresvi.ft$hx ] ; then
		    cp r_rresvi.ft$hx r_rresvi || exit 8
		fi
		#
		#  post processing
		#
		if [ " " = DEFINED ] ; then
			/rhome/yeong/test/svrtest/libs/etc/catpgb
		fi
		FTP_DIR=`eval echo $ARCHIVE_DIR`
		FTP_PLATFORM=$ARCHIVE_PLATFORM
		FTP_PROTOCOL=$ARCHIVE_FTP_PROTOCOL
		export FTP_DIR FTP_PLATFORM FTP_PROTOCOL
		/rhome/yeong/test/svrtest/gsm_runs/runscr/r_post non_batch $EXECDIR \
						$YYYY:$MM:$DD:$HH:$h:$hx:$YYYYS:$MMS:$FHLEN:$ENDHOUR:$INTPOST \
					     ||	exit 8
		#
		#  Delete old short archive files
		#
		for file in $LIST_OF_FILES
		do
			ftpfile=FTP_`echo $file | tr '[a-z]' '[A-Z]'`
			x=\$$ftpfile
			x=`eval echo $x`
			if [ "$x" = yes ] ; then
				continue
			fi
			rc=0
			for filex in $FILES_TO_BE_KEPT
			do
				if [ $filex = $file ] ; then
					rc=1
				fi
			done
			if [ $rc -eq 1 ] ; then
				continue
			fi
			rc=0
			for filex in $FILES_TO_BE_AVERAGED
			do
				if [ $filex = $file ] ; then
					rc=1
				fi
			done
			if [ $rc -eq 1 ] ; then
				continue
			fi
			if [ $file = r_flx ] ; then
				continue
			fi
			/rhome/yeong/test/svrtest/gsm_runs/runscr/delfile $file $h $hx $INTPOST || exit 8
		done
		#
		# delete base or coarse grid boundary condition for $h
		#
		if [ "$DELETE_BASE" = yes ] ; then
			fh=0
			while [ $fh -lt $INCHOUR ] ; do
				fhx=`expr $fh + $h`
				/rhome/yeong/test/svrtest/libs/etc/incdte $YYYY $MM $DD $HH $fhx  >dteout$$ || exit 8
				read YYYYF  MMF  DDF  HHF  <dteout$$ ; rm dteout$$
				rm base.$YYYYF$MMF$DDF$HHF
				fh=`expr $fh + $NESTING_HOUR`
			done
		fi
		#
		if [ $CHUNK_QSUB = yes ] ; then
			hi=`expr $hx - $h0`
			modhi=`expr $hi \% $CHUNK_QSUB_INT`
			if [ $modhi -eq 0 -o $hx -eq $ENDHOUR  ] ; then
				if [ -z "$SUBMIT" ] ; then
					$SUBMIT_SCRIPT &
				elif [ "$SUBMIT" = bsub ] ; then
					$SUBMIT < $SUBMIT_SCRIPT
				else
					$SUBMIT $SUBMIT_SCRIPT
				fi
				exit
			fi
		fi
		h=$hx
	done
#
#  clean up orography
#
	rm top*.asc
	YYYY=`expr $YYYY + 1`
done
#
if [ linux != cray -a linux != t90 ] ; then
	rm -f fort.[0-9]* 2>/dev/null
fi
#
echo "`date` $0: ended" >>ERROR.out
