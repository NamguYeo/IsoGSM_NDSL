#!/bin/sh
if [ $# -eq 0 ] ; then
	echo 'Usage: grmapsub filenames'
	echo "`date` $0: Wrong usage." >>ERROR.out
	exit 8
fi
if [ -z "$INTRES" ] ; then
	INTRES=U
	echo ' INTRES not defined.  Default set to "U" (No unpack)'
fi
if [ -z "$IFTYPE" ] ; then
	IFTYPE='0,0,0,0,0,0,0,0,0,0'
fi
#
iftype=1
echo $IFTYPE | grep '0' > /dev/null
if [ $? -eq 0 ] ; then
	iftype=0
else
	echo $IFTYPE | grep '2' > /dev/null
	if [ $? -eq 0 ] ; then
		iftype=2
	else
		echo $IFTYPE | grep '3' > /dev/null
		if [ $? -eq 0 ] ; then
			iftype=3
		fi
		echo $IFTYPE | grep '4' > /dev/null
		if [ $? -eq 0 ] ; then
			iftype=4
		fi
		echo $IFTYPE | grep '5' > /dev/null
		if [ $? -eq 0 ] ; then
			iftype=5
		fi
		echo $IFTYPE | grep '6' > /dev/null
		if [ $? -eq 0 ] ; then
			iftype=6
		fi
	fi
fi
echo iftype=$iftype in grmapsub
#
NCPUS=1
export NCPUS
#
rm namlpre.[1-9] 2>/dev/null
#
echo ' '
fexist=no
#
unitarg=' '
tincarg=''
unit=' '
tinc=''
cnt=0
ndln=1
for argus
do
	cnt=` expr $cnt + 1 `
  ndln=`expr $ndln + 1`
	fngrib=`echo "$argus" | cut -d: -f1`
	echo "$fngrib" >>namlpre.1
#
#  Find file names of the grads wild card format
#
	filenx="`echo "$fngrib" | sed "s/${DELIM}[ymdh]1/[0-9]/g"`"
	filenx=`echo "$filenx" | sed "s/${DELIM}[ymdh]2/[0-9][0-9]/g"`
	filenx=`echo "$filenx" | sed "s/${DELIM}[ymdh]3/[0-9][0-9][0-9]/g"`
	filenx=`echo "$filenx" | sed "s/${DELIM}[ymdh]4/[0-9][0-9][0-9][0-9]/g"`
	filen1=`echo "$filenx" | sed "s/${DELIM}f1/[0-9]/g"`
	filen1=`echo "$filen1" | sed "s/${DELIM}f2/[0-9][0-9]/g"`
	filen1=`echo "$filen1" | sed "s/${DELIM}f3/[0-9][0-9][0-9]/g"`
	filen1=`echo "$filen1" | sed "s/${DELIM}f4/[0-9][0-9][0-9][0-9]/g"`
	filen2=`echo "$filenx" | sed "s/${DELIM}f1/[0-9][0-9]/g"`
	filen2=`echo "$filen2" | sed "s/${DELIM}f2/[0-9][0-9][0-9]/g"`
	filen2=`echo "$filen2" | sed "s/${DELIM}f3/[0-9][0-9][0-9][0-9]/g"`
	filen3=`echo "$filenx" | sed "s/${DELIM}f1/[0-9][0-9][0-9]/g"`
	filen3=`echo "$filen3" | sed "s/${DELIM}f2/[0-9][0-9][0-9][0-9]/g"`
	filen4=`echo "$filenx" | sed "s/${DELIM}f1/[0-9][0-9][0-9][0-9]/g"`
#
#  Find time increments if grads wild card format
#
	echo $fngrib | grep "$DELIM" > /dev/null
	if [ $? -eq 0 ] ; then
		echo $fngrib | grep "${DELIM}f" > /dev/null
		if [ $? -eq 0 ] ; then
			sedfil="`echo "$fngrib" | sed "s/${DELIM}[ymdh]1/./g"`"
			sedfil="`echo "$sedfil" | sed "s/${DELIM}[ymdh]2/../g"`"
			sedfil="`echo "$sedfil" | sed "s/${DELIM}[ymdh]3/.../g"`"
			sedfil="`echo "$sedfil" | sed "s/${DELIM}[ymdh]4/..../g"`"
			sedfil="`echo "$sedfil" | sed "s/${DELIM}f[1-4]/\\\([0-9][0-9]*\\\)/g"`"
			unit=hr
		else
			echo $fngrib | grep "${DELIM}h" > /dev/null
			if [ $? -eq 0 ] ; then
				sedfil="`echo "$fngrib" | sed "s/${DELIM}[ymdf]1/./g"`"
				sedfil="`echo "$sedfil" | sed "s/${DELIM}[ymdf]2/../g"`"
				sedfil="`echo "$sedfil" | sed "s/${DELIM}[ymdf]3/.../g"`"
				sedfil="`echo "$sedfil" | sed "s/${DELIM}[ymdf]4/..../g"`"
				sedfil="`echo "$sedfil" | sed "s/${DELIM}h[1-2]/\\\([0-9][0-9]*\\\)/g"`"
				unit=hr
			else
				echo $fngrib | grep "$DELIM}d" > /dev/null
				if [ $? -eq 0 ] ; then
					sedfil="`echo "$fngrib" | sed "s/${DELIM}[ymhf]1/./g"`"
					sedfil="`echo "$sedfil" | sed "s/${DELIM}[ymhf]2/../g"`"
					sedfil="`echo "$sedfil" | sed "s/${DELIM}[ymhf]3/.../g"`"
					sedfil="`echo "$sedfil" | sed "s/${DELIM}[ymhf]4/..../g"`"
					sedfil="`echo "$sedfil" | sed "s/${DELIM}d[1-2]/\\\([0-9][0-9]*\\\)/g"`"
					unit=dy
				else
					echo $fngrib | grep "${DELIM}m" > /dev/null
					if [ $? -eq 0 ] ; then
						sedfil="`echo "$fngrib" | sed "s/${DELIM}[ydhf]1/./g"`"
						sedfil="`echo "$sedfil" | sed "s/${DELIM}[ydhf]2/../g"`"
						sedfil="`echo "$sedfil" | sed "s/${DELIM}[ydhf]3/.../g"`"
						sedfil="`echo "$sedfil" | sed "s/${DELIM}[ydhf]4/..../g"`"
						sedfil="`echo "$sedfil" | sed "s/${DELIM}m[1-3]/\\\([0-9][0-9]*\\\)/g"`"
						unit=mo
					else
						echo $fngrib | grep "${DELIM}y" > /dev/null
						if [ $? -eq 0 ] ; then
							sedfil="`echo "$fngrib" | sed "s/${DELIM}[mdhf]1/./g"`"
							sedfil="`echo "$sedfil" | sed "s/${DELIM}[mdhf]2/../g"`"
							sedfil="`echo "$sedfil" | sed "s/${DELIM}[mdhf]3/.../g"`"
							sedfil="`echo "$sedfil" | sed "s/${DELIM}[mdhf]4/.../g"`"
							sedfil="`echo "$sedfil" | sed "s/${DELIM}y[1-2]/\\\([0-9][0-9]*\\\)/g"`"
							unit=yr
						else
							echo " Illegal grads $DELIM format."
							echo "`date` $0: Illegal grads $DELIM format." >>ERROR.out
							exit 8
						fi
					fi
				fi
			fi
		fi
	fi
#
	rm namlpre.tmp 2>/dev/null
	ccnt=0
	cccc=0
	nf=1
	echo ' '
	echo ' '
	echo ' Searching file(s) of the form,' " $fngrib"
	echo ' '
	while [ $nf -le 4 ] ; do
		filenm=`eval echo '\$filen'$nf`
		if [ $nf -gt 1 ] ; then
			nff=1
			while [ $nff -le $nf ] ; do
				if [ $nff -eq $nf ] ; then
					nff=`expr $nff + 1`
					continue
				fi
				filenx=`eval echo '\$filen'$nff`
				if [ "$filenm" = "$filenx" ] ; then
					nf=`expr $nf + 1`
					continue 2
				fi
				nff=`expr $nff + 1`
			done
		fi
#
		if [ "$filenm" != $fngrib ] ; then
			if [ $nf -eq 1 ] ; then
				if [ -z "$NFLAG" ] ; then
					echo ' You have multiple files for the file specification given.'
					echo ' (a) Do you want to process all the files or'
					echo ' (s) Do you want to select files(s) from the list?'
					echo ' Type a/s ==>\c'
					syn=
					while [ "$syn" != a -a "$syn" != s ] ; do
						read syn
						if [ "$syn" != a -a "$syn" != s ] ; then
							echo ' Illegal input.  Try again ==>\c'
						else
							break
						fi
					done
				else
					syn=a
				fi
			fi
#
			cccx=0
			for filen in $filenm
			do
				cccc=`expr $cccc + 1`
				cccx=`expr $cccx + 1`
				if [ -f $filen ] ; then
					echo " $filen"
					if [ -s $filen ] ; then
						if [ "$syn" = s ] ; then
							echo ' Select this file? y/n/N ==>\c' 
								read sel
						fi
						if [ "$sel" = 'N' ] ; then
							break
						fi
						if [ $syn = a -o $syn = s -a "$sel" = y ] ; then
							echo $filen >>namlpre.tmp
							ccnt=` expr $ccnt + 1 `
							fexist=yes
						else
							echo " File skipped .. $filen"
						fi
					else
						echo " File $filen empty.  Skipped"
						shift
					fi
				else
					if [ $nf -eq 1 ] ; then
						echo " Caution! File of the matching %xx type not found."
					fi
				fi
			done
		else
			if [ $nf -eq 1 ] ; then
				echo " Searching file, $fngrib"
			fi
			if [ -s $filenm ] ; then
  			echo " $filenm"
				fexist=yes
				ccnt=` expr $ccnt + 1 `
				echo $filenm >>namlpre.tmp
			else
				if [ $nf -eq 1 ] ; then
					echo " File $filenm empty.  Skipped"
				fi
			fi
		fi
		nf=`expr $nf + 1`
	done
	if [ $ccnt -ge 0 ] ; then
		if [ $ccnt -gt 1 ] ; then
			sedfil="`echo "$sedfil" | sed 's/(\[0-9\]\[0-9\]\*)/\\\([0-9][0-9]*\\\)/g'`"
 			sedfil="`echo "$sedfil" | sed 's/([0-9][0-9]\*)/\\([0-9][0-9]*\\)/g'`"
			sed "s?$sedfil?\1?g" namlpre.tmp >namlpre.9
			lnum=`wc -l namlpre.9 | cut -dn -f1`
			if [ $lnum -gt 1 ] ; then
				t0=`sed -n '1p' namlpre.9`
				numch1=`expr $t0 : '[0-9]*'`
				numch2=`echo $t0 | sed 's/ //g' | wc -c | sed 's/ //g'`
				numch2=`expr $numch2 - 1`
				if [ "$numch1" -ne "$numch2" ] ; then
					echo " Bad grads $DELIM format File name"
					echo "`date` $0: Bad grads $DELIM format File name." >>ERROR.out
					exit 8
				fi
				t1=`sed -n '2p' namlpre.9`
				numch1=`expr $t1 : '[0-9]*'`
				numch2=`echo $t1 | sed 's/ //g' | wc -c | sed 's/ //g'`
				numch2=`expr $numch2 - 1`
				if [ "$numch1" -ne "$numch2" ] ; then
					echo " Bad grads $DELIM format File name"
					echo "`date` $0: Bad grads $DELIM format File name." >>ERROR.out
					exit 8
				fi
				tinc=`expr $t1 - $t0`
			fi
		fi
		echo $ccnt >>namlpre.2
		if [ -s namlpre.tmp ] ; then
			cat namlpre.tmp >>namlpre.2
		fi
	fi
	echo " Number of Files found for this type=$ccnt"
	unitarg="'$unit',$unitarg"
	tincarg="$tinc,$tincarg"
done
#
if [ $fexist = no ] ; then
	echo " All files are empty."
	echo "`date` $0: All files are empty." >>ERROR.out
	exit 8
fi
#
echo $cnt >grmap.parm
cat namlpre.1 >>grmap.parm
echo ' '
echo ' &NAMPRE' >>grmap.parm
#
#  kpds5 and kpds6 files
#
echo " FNKPDS5='$GRMAPDIR/grib1.kpds5.vsn22'" >>grmap.parm
echo " FNKPDS6='$GRMAPDIR/grib1.kpds6.vsn21'" >>grmap.parm
#
unpack=n
#
#  Unpack option
#
if [ $iftype -eq 0 -a "$INTRES" = U ] ; then
	if [ -z "$NFLAG" ] ; then
		echo ' '
		echo ' Select your choice from below:'
		echo ' '
		echo ' n) No unpacking.  Create control file(s) only'
		echo ' y) Unpacks ALL the fields.'
		echo ' s) Unpacks SELECTED fields.'
		echo ' i) Unpacks/INTERPOLATES ALL fields to given lat/lon grid over given area.'
		echo ' b) Do both s) and i)'
		echo ' ======>\c'
		if [ -z "$SARG" ] ; then
			yn=''
			while [ "$yn" != y -a "$yn" != n  -a "$yn" != s -a "$yn" != i -a  "$yn" != b ] ; do
				read yn
				if [ "$yn" != y -a "$yn" != n  -a "$yn" != s -a "$yn" != i -a  "$yn" != b ] ; then
					echo " Illegal input. Type y/n ==>\c"
				else
					break
				fi
			done
			echo $yn >>$HISTOUT
		else 
			RDCNT=`expr $RDCNT + 1`
			yn=`sed -n "$RDCNT p" $HISTKEY`
			echo $yn
		fi
	else
		yn=n
	fi
#
		if [ "$yn" = y -o "$yn" = s -o "$yn" = i -o "$yn" = b ] ; then
		unpack=y
		echo ' LUNPK=.T.,' >>grmap.parm
		if [ "$yn" = s -o "$yn" = b ] ; then
			echo " LSELCT=.T.," >>grmap.parm
			echo ' '
		fi
		if [ "$yn" =  i -o "$yn" = b ] ; then
			echo ' Enter output lat/lon grid resolution in degrees ==>\c'
			cc=0
			while [ $cc -eq 0 ] ; do
				if [ -z "$SARG" ] ; then
					read dphi
					echo $dphi >>$HISTOUT
				else 
					RDCNT=`expr $RDCNT + 1`
					dphi=`sed -n "$RDCNT p" $HISTKEY`
					echo $dphi
				fi
				if [ -z "$dphi" ] ; then
					break
				else
					dphix=`echo $dphi | sed 's/\.//g'`
					numch1=`expr $dphix : '[0-9]*'`
					numch2=`echo $dphix | sed 's/ //g' | wc -c | sed 's/ //g'`
					numch2=`expr $numch2 - 1`
					if [ "$numch1" -ne "$numch2" ] ; then
						if [ -z "$SARG" ] ; then
							echo ' Illegal input. Try again ==>\c'
						else
							echo ' Bad HISTKEY file'
							echo "`date` $0: Bad HISTKEY file." >>ERROR.out
							exit 8
						fi
					else
						echo " DXPHI=$dphi," >>grmap.parm
						break
					fi
				fi
			done
		fi
		if [ "$yn" = i -o "$yn" = b ] ; then
			echo ' Type in area to be selected. (GL,NH,SH,NA,EU,JP for specific areas)'
			echo ' slat nlat wlon elon ==>\c'
			cc=0
			while [ $cc -eq 0 ] ; do
				if [ -z "$SARG" ] ; then
					read slat nlat wlon elon
					echo "$slat $nlat $wlon $elon" >>$HISTOUT
				else 
					RDCNT=`expr $RDCNT + 1`
					slat=`sed -n "$RDCNT p" $HISTKEY | cut -d' ' -f1`
					nlat=`sed -n "$RDCNT p" $HISTKEY | cut -d' ' -f2`
					wlon=`sed -n "$RDCNT p" $HISTKEY | cut -d' ' -f3`
					elon=`sed -n "$RDCNT p" $HISTKEY | cut -d' ' -f4`
					echo $slat $nlat $wlon $elon
				fi
		#
				if [ "$slat" = GL -o "$slat" = NH -o "$slat" = SH ] ; then
					wlon=0.
					elon=360.
					if [ "$slat" = GL ] ; then
						slat=-90.
						nlat=90.
					elif [ "$slat" = NH ] ; then
						slat=0.
						nlat=90.
					else
						slat=-90.
						nlat=0.
					fi
				elif [ "$slat" = JP -o "$slat" = NA -o "$slat" = EU ] ; then
					if [ "$slat" = JP ] ; then
						slat=20.
						nlat=55.
						wlon=100.
						elon=160.
					elif [ "$slat" = NA ] ; then
						slat=20.
						nlat=60.
						wlon=-130.
						elon=-60.
					elif [ "$slat" = EU ] ; then
						slat=25.
						nlat=65.
						wlon=-30.
						elon=50.
					fi
				elif [ -z "$slat" -o -z "$nlat" -o -z "$wlon" -o -z "$elon" ] ; then
					if [ -z "$SARG" ] ; then
						echo ' Illegal input. Type area again ==>\c'
					else
						echo ' Bad HISTKEY file'
						echo "`date` $0: Bad HISTKEY file." >>ERROR.out
						exit 8
					fi
				else
					echo $slat | grep '\.' >/dev/null
					if [ $? -ne 0 ] ; then
						slat=$slat.
					fi
					echo $nlat | grep '\.' >/dev/null
					if [ $? -ne 0 ] ; then
						nlat=$nlat.
					fi
					echo $wlon | grep '\.' >/dev/null
					if [ $? -ne 0 ] ; then
						wlon=$wlon.
					fi
					echo $elon | grep '\.' >/dev/null
					if [ $? -ne 0 ] ; then
						elon=$elon.
					fi
				fi
				echo " slat=$slat  nlat=$nlat  wlon=$wlon  elon=$elon"
				echo " Is this OK? y/n==>\c"
				if [ -z "$SARG" ] ; then
					read okok
					echo $okok >>$HISTOUT
				else 
					RDCNT=`expr $RDCNT + 1`
					okok=`sed -n "$RDCNT p" $HISTKEY`
					echo $okok
				fi
				if [ "$okok" = y ] ; then
					break
				else
					echo ' Type area again ==>\c'
				fi
			done
			echo " XLATS=$slat,XLATN=$nlat,XLONW=$wlon, XLONE=$elon," >>grmap.parm
		fi
	else
		echo ' LUNPK=.F.,' >>grmap.parm
	fi
elif [ $iftype -eq 0 ] ; then
	unpack=y
	echo ' LUNPK=.T.,' >>grmap.parm
fi
#if [ -n "$RUNAME" ] ; then
#	echo " RUNAME='$RUNAME'," >>grmap.parm
#fi
#
if [ $iftype -eq 3 -o $iftype -eq 4 -o $iftype -eq 5  -o  $iftype -eq 6 ] ; then
	echo ' Type in IBGES,JBGES ==>\c'
	cc=0
	while [ $cc -eq 0 ] ; do
		if [ -z "$SARG" ] ; then
			read ibges jbges
			echo "$ibges $jbges" >>$HISTOUT
		else 
			RDCNT=`expr $RDCNT + 1`
			ibges=`sed -n "$RDCNT p" $HISTKEY | cut -d' ' -f1`
			jbges=`sed -n "$RDCNT p" $HISTKEY | cut -d' ' -f2`
			echo $ibges $jbges
		fi
		if [ -z "$ibges" -o -z "$jbges" ] ; then
			if [ -z "$SARG" ] ; then
				echo ' Illegal input. Type ibges, jbges again ==>\c'
			else
				echo ' Bad HISTKEY file'
				echo "`date` $0: Bad HISTKEY file." >>ERROR.out
				exit 8
			fi
    fi
		numch1=`expr $ibges : '[0-9]*'`
		numch2=`echo $ibges | sed 's/ //g' | wc -c | sed 's/ //g'`
		numch2=`expr $numch2 - 1`
		if [ "$numch1" -ne "$numch2" ] ; then
			if [ -z "$SARG" ] ; then
				echo ' Illegal input. Try again ==>\c'
			else
				echo ' Bad HISTKEY file'
				echo "`date` $0: Bad HISTKEY file." >>ERROR.out
				exit 8
			fi
		else
			numch1=`expr $jbges : '[0-9]*'`
			numch2=`echo $jbges | sed 's/ //g' | wc -c | sed 's/ //g'`
			numch2=`expr $numch2 - 1`
			if [ "$numch1" -ne "$numch2" ] ; then
				if [ -z "$SARG" ] ; then
					echo ' Illegal input. Try again ==>\c'
				else
					echo ' Bad HISTKEY file'
					echo "`date` $0: Bad HISTKEY file." >>ERROR.out
					exit 8
				fi
			fi
			break
		fi
	done
	echo " IBGES=$ibges," >>grmap.parm
	echo " JBGES=$jbges," >>grmap.parm
fi
if [ $iftype -eq 1 -o $iftype -eq 2 ] ; then
	echo ' Type in Number of model levels ==>\c'
	cc=0
	while [ $cc -eq 0 ] ; do
		if [ -z "$SARG" ] ; then
			read levs 
			echo "$levs" >>$HISTOUT
		else 
			RDCNT=`expr $RDCNT + 1`
			levs=`sed -n "$RDCNT p" $HISTKEY | cut -d' ' -f1`
			echo $levs
		fi
		if [ -z "$levs" ] ; then
			if [ -z "$SARG" ] ; then
				echo ' Illegal input. Type levs again ==>\c'
			else
				echo ' Bad HISTKEY file'
				echo "`date` $0: Bad HISTKEY file." >>ERROR.out
				exit 8
			fi
    fi
		numch1=`expr $levs : '[0-9]*'`
		numch2=`echo $levs | sed 's/ //g' | wc -c | sed 's/ //g'`
		numch2=`expr $numch2 - 1`
		if [ "$numch1" -ne "$numch2" ] ; then
			if [ -z "$SARG" ] ; then
				echo ' Illegal input. Try again ==>\c'
			else
				echo ' Bad HISTKEY file'
				echo "`date` $0: Bad HISTKEY file." >>ERROR.out
				exit 8
			fi
		fi
		break
	done
	echo " LEVMDL=$levs," >>grmap.parm
fi
echo " INCUNIT=$unitarg" >>grmap.parm
if [ "$tincarg" != "," ] ; then
	echo " INCTIME=$tincarg" >>grmap.parm
fi
# echo " IFKEY='I'," >>grmap.parm
echo " LVDATE=.F.," >>grmap.parm
echo " IFTYPE=$IFTYPE," >>grmap.parm
#if [ "$stt" -eq 5 ] ; then
#	echo " LDOS=.T.," >>grmap.parm
#	echo " FNCTLI=$FNCTLI," >>grmap.parm
#else
#	echo " LDOS=.F.," >>grmap.parm
#fi
if [ -n "$SARG" ] ; then
	echo " LHISKEY=.T.," >>grmap.parm
else
	echo " LHISKEY=.F.," >>grmap.parm
fi
echo ' LDEBUG=.T.,' >>grmap.parm
echo " DELIM='$DELIM'," >>grmap.parm
echo ' LY2000=.T.,' >>grmap.parm
echo ' &END' >>grmap.parm
cat namlpre.2 >>grmap.parm
#
if [ -n "$HISTKEY" ] ; then
	RDCNT=`expr $RDCNT + 1`
	sed -n "$RDCNT,$ p" $HISTKEY >namlpre.0
	if [ ! -f namlpre.0 ] ; then
		echo ' Selection data file empty'
		echo "`date` $0: Selection data file empty." >>ERROR.out
		exit 8
	fi
fi
#
echo ' '
echo " Processing taking place in the directory `pwd`"
echo ' '
#
#
echo '\n\n'
ln -sf $GRMAPDIR/grmap.x grmap.x
grmap.x 2>grmap.out
cc=$?
if [ $cc -ne 0 ] ; then
	echo ' Execution failed'
	echo "`date` $0: Executino failed." >>ERROR.out
	exit 8
fi
rm namlpre.[0-9] namlpre.tmp stderr$$.grmap 2>/dev/null
exit 0
