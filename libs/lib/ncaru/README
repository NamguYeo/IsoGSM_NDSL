
This is the source distribution for the Cray file conversion 
library "ncaru" (NCAR Utilities).  This library contains Fortran and C
bindings to routines for reading and writing Cray style datasets
from non-Cray platforms.  

Description
-----------
The library contains the following user entry points:

       crayblocks()  	- Sets the size of the library buffer.
       crayback()	- Moves back a record in a Cray file.
       crayclose()	- Closes a Cray file.
       crayopen()	- Opens a Cray blocked or unblocked file.
       crayread()	- Reads data from a Cray file.
       crayrew()	- Rewinds a Cray file.
       crayweof()	- Writes an EOF to a Cray file
       crayweod()	- Writes an EOD to a Cray file.
       craywrite()	- Writes data to a Cray file.

In addition, a number of numeric conversion routines are also included.
These can be used indirectly through the crayread() and craywrite()
routines, or directly from Fortran/C.  These routines convert to/from Cray
64bit values only. 

       ctodpf()		- Cray to IEEE double precision.
       ctospf()		- Cray to IEEE single precision. (floating point)
       ctospi()		- Cray to IEEE single precision. (integer)
       dptocf()		- IEEE double precision (floating) to Cray. 
      *dptoci()		- IEEE double precision (integer) to Cray. 
			  (For RS6000 -qautodbl=dblpad)
       sptocf()		- IEEE single precision (floating) to Cray.
       sptoci()		- IEEE single precision (integer) to Cray.

* This routine does not support the xlf version 3.1 INTSIZE=8 option.
  See the man page.

Finally, three Cray blocked file utilities are included.  These are:
	
	cosfile 	- Examines a blocked file and reports record sizes.
	cosconvert	- Strips Cray blocking from a file.
	cossplit	- Splits a multifile Cray blocked dataset into 
			  separate files.


Features
--------
The library has the following features:

    1) Ability to read and write both Cray unblocked or blocked
       datasets.

    2) Automatic numeric conversion between Cray single precision data 
       formats and IEEE (both single and double precision) formats 
       during crayread() or craywrite().  You can also call the numeric
       conversion routines directly yourself.

    3) Ability to specify a library buffer of an appropriate size. 
       This is most useful in NFS environments on paged machines.
       (although a slight increase in preformance can be noted in 
	non-NFS environments.) 

    4) Full BACKSPACE and REWIND implementations which mimic Cray Fortran.

    5) The ability to append to the end of the last file in a 
       Cray dataset.  (See crayopen(3))

    6) Full and partial record operations for blocked files.  Regardless 
       of the requested number of words, crayread always returns at the 
       next record.  
       
       This means that you can read a single word, and move the record 
       pointer to the next record.  Useful to skip records without
       having a large unused buffer lying about.  

       You can also request a larger number of words than the actual 
       record contains, and only the actual number of words in the record
       are transferred.  

    7) Both Fortran and C interfaces are documented in the man pages. 
       The C interface is admittedly kludgy.  Basically, you are calling
       the Fortran interface (which means you have to pass in pointers
       to everything).  Unfortunantely, the Fortran interface was
       established first and we choose not to add additional routines to
       make the C interface less cumbersome.



Porting
-------
The library has been ported to Suns, CM-5 (essentially a Sun) and IBM
RS6000 machines.  We'd be interested in mods for ports to other
platforms as well.  See the acknowledgements section below.


Building
--------
The library is currently set up to install in /usr/local/{bin,lib,man}
for the utilities, library and man pages.  If you wish to change the
locations, you will need to modify the makefiles in each of the source
directories.  Don't worry, the makefiles are extremely trivial. 
To build, move to the top of the source tree and type:

	% make clean
	% make

To install:  (in this directory)

	% make install
	% make install.man


Testing
-------
cd to the tests directory and look at the README.


Acknowledgements
----------------
This distribution is the result of several people's efforts.  Tom Parker
wrote the original COS utilities, cosfile, cosconvert, and cossplit for
the Cray.  Chuck D'ambra write the original numeric conversion routines
for a utility his division uses.  Craig Ruff wrote the original Cray blocking
routines.  Dan Anderson and Greg Woods originally combined both the 
conversions and Cray routines into a single package.  The author took 
the whole mess and added backspacing, wrote man pages, optimized, added 
other enhancements, and rewrote the COS utilities using the new library. 
Comments, enhancement, etc, are welcome.

We have moved gigabytes of data routine these routines on our IBM
cluster.  Hope you find them useful at your site.

-PWM
------------------------------------------------------------------
Peter W. Morreale                  email:  morreale@ncar.ucar.edu
Nat'l Center for Atmos Research    voice:  (303) 497-1293
Scientific Computing Division     
Consulting Office
------------------------------------------------------------------

(c) Copyright 1994 University Corporation for Atmospheric Research (UCAR).

Permission to use, copy, and modify this software and its documentation 
for any non-commercial purpose is hereby granted without fee, provided 
that the above copyright notice appear in all copies and that both that 
copyright notice and this permission notice appear in supporting 
documentation. UCAR makes no representations about the suitability of 
this software for any purpose.   It is provided "as is" without express
or implied warranty.

