#insert-HEADER
#
set -ax
#
# this script makes global full sigma-level data from scarce global 
# pressure level data in vertical and time, with the incremental interpolation.
# in this sample script, era40 data is used only for 5 levels (1000, 850, 
# 700, 500, and 200 hPa) for 1990/03/09-11. this is based on gsm script.
# sst and seaice are taken from ncep, but it's better to use era's, maybe. 
#
# you need to compile sigadd, sigadd2, and sigdif
#
# ---------------  user changeable parameters ------------------------
#
# Change the following variable if you are running separate experiments
# from the same directory
#
INCINT=24 ## if less than 24, NFDR should be undefined in fcst.
INCLVS=5
INCEND=48
YYYYS=1990
MMS=03
DDS=09
HHS=00
INCDATA=@LIBS_DIR@/con/era40_19900309.grib
if [ ! -r $INCDATA ] ; then
    echo No $INCDATA 
    echo Please do "cvs co con/era40_19900309.grib"
    echo Abort
    exit 8
fi
#
if [ ! -r @RUNSCR_DIR@/p2sig${INCLVS}L ] ; then
  echo you need to have p2sig${INCLVS}L.
  echo Abort
  exit 8
fi
#
if [ ! -r @RUNSCR_DIR@/sigadd ] ; then
  echo you need to have sigadd/sigdif/sigadd2.
  echo Please do "cvs co runscr/sigtool.tar" and compile
  echo Abort
  exit 8
fi
RUNNAME=i_000
#
ENDHOUR=${INCINT}
while [ $ENDHOUR -le $INCEND ] ; do

# Intervals of sfc execution, sigma output, sfc output and flx output
# Various options for running the model
#
INCHOUR=$ENDHOUR
# INTSIG should be equal to INTPOST
# INCINT should be equal to INTRESTART
INTSFCX=24
INTSIG=6
INTSFC=6
INTPOST=6
INTRESTART=24  
#
FCST_RESTART=yes
#
#  ------------- below for expert user only --------------------
#
# If you wish, you may modify EXECDIR to /tmp directory and keep these
# scripts on your permanent disk.
#
EXECDIR=@RUNS_DIR@/$RUNNAME
#
# -------  do not change below  -------------------------------------
#
mkdir -p $EXECDIR 2>/dev/null
#
INITIAL_SIGMA=@LIBS_DIR@/con/sigft0090030900.asc
INITIAL_SFC=@LIBS_DIR@/con/sfcanl90030900.asc
INITIAL_SFC_FILE_TYPE=osu1
#
#  blank means use guess (in the sfc file).
#
SST_ANL_T0=
ICE_ANL_T0=
SNO_ANL_T0=
SCV_ANL_T0=
SST_ANL=@LIBS_DIR@/con/sstanl.900309.grib
ICE_ANL=@LIBS_DIR@/con/clim.ice.grib
SNO_ANL=
SCV_ANL=
#
INPUT_RESOLUTION=t@IJCAP@k@ILEVS@
#
FCST_NPES=@NPES@
#
#  cd to run directory
#
scrnam=`echo $0 | sed 's?.*/??g'`
cp $0 $EXECDIR/0LOG.$scrnam
ls -l @MODEL_DIR@/bin >$EXECDIR/0LOG.bindates
cd $EXECDIR || exit 8
#
### prepare era40 forcing ###
#
@LIBS_DIR@/etc/incdte $YYYYS $MMS $DDS $HHS $ENDHOUR  >dteout$$ || exit 8
read YYYYF MMF DDF HHF  <dteout$$ ; rm dteout$$
#
if [ ! -r ./era40_$YYYYF$MMF$DDF$HHF.p2sig${INCLVS}L ] ; then
  @RUNSCR_DIR@/p2sig_era${INCLVS}L $INCDATA ./era40_$YYYYF$MMF$DDF$HHF.p2sig${INCLVS}L $YYYYF:$MMF:$DDF:$HHF:0 || exit 8
fi    
#
#  renew log file
#
cat $0 > ERROR.out
echo '==============' >>ERROR.out
#
# Automatic restart
#
if [ -s sigit -a -s sigitdt -a -s sfci -a "$FCST_RESTART" = yes ];then
	#
	#  Restart
	#
	h=`@LIBS_DIR@/etc/fhour sigit`
	echo fhour in the sigit file = $h
else
	#
	#  Initial start.
	#
	h=00
	#
	# Conversion from ascii to native format
	#
	fmt=`echo $INITIAL_SIGMA | sed 's/.*\.//g'`
	@LIBS_DIR@/etc/scnvrt gsm $INITIAL_SFC_FILE_TYPE \
		@IJCAP@:@ILONF@:@ILATG@:@ILEVS@ \
		-1:-1:-1:-1:-1 \
		$fmt:bin $INITIAL_SIGMA:$INITIAL_SFC \
		cnvrt_initial_sig:cnvrt_initial_sfc || exit 8
	#
	# Find initial date and hour
	#
	@LIBS_DIR@/etc/date cnvrt_initial_sig >date.$$ || exit 8
	read HH MM DD yyyy FH <date.$$ ; rm date.$$
	echo $yyyy $MM $DD $HH $FH
	#
	# Change input resolution to model resolution
	#
	@RUNSCR_DIR@/chgr \
			cnvrt_initial_sig cnvrt_initial_sfc \
			sigit sfci \
			$INITIAL_SFC_FILE_TYPE || exit 8
	#
	#  convert initial sfc file type to model sfc file type
	#
	SST_GRB_T0=`eval echo $SST_ANL_T0`
	SNO_GRB_T0=`eval echo $SNO_ANL_T0`
	SCV_GRB_T0=`eval echo $SCV_ANL_T0`
	ICE_GRB_T0=`eval echo $ICE_ANL_T0`
	export SST_GRB_T0 SNO_GRB_T0 SCV_GRB_T0 ICE_GRB_T0
	@RUNSCR_DIR@/sfc0 sfci sfco $INITIAL_SFC_FILE_TYPE || exit 8
	#
	cp sfco sfci || exit 8
	cp sigit sigitdt || exit 8
	cp sigit sig.ft$h || exit 8
	cp sfci  sfc.ft$h || exit 8
	#
	@LIBS_DIR@/etc/date sigit >date.$$ || exit 8
	read HH MM DD yyyy FH <date.$$ ; rm date.$$
	echo $yyyy $MM $DD $HH $FH
	#
	#  pgb of the initial
	#
	if [ "@DOPOST@" = DEFINED ] ; then
		@RUNSCR_DIR@/pgb $h $h $INTSFCX || exit 8
	elif [ "@CATPGB@ " = DEFINED ] ; then
		@LIBS_DIR@/etc/catpgb
	fi
fi
#
#  forecast hour loop
#
xc=0
while [ $h -lt $ENDHOUR ] ; do
	#
	hx=`expr $h + $INCHOUR`
	if [ $hx -gt $ENDHOUR ] ; then
		hx=$ENDHOUR
	fi
	if [ $hx -lt 10 ];then hx=0$hx;fi
	#
	SST_GRB=`eval echo $SST_ANL`
	SNO_GRB=`eval echo $SNO_ANL`
	SCV_GRB=`eval echo $SNO_ANL`
	ICE_GRB=`eval echo $ICE_ANL`
	export SST_GRB SNO_GRB SCV_GRB ICE_GRB
	@RUNSCR_DIR@/fcstparm $INCHOUR $ENDHOUR $INTSFCX \
			$INTSIG:$INTSFC:$INTPOST:$INTRESTART || exit 8
	#
	#  Execute forecast
	#
	@RUNSCR_DIR@/fcst || exit 8
	#
	#  pgb of the forecast
	#
	if [ "@DOPOST@" = DEFINED ] ; then
		@RUNSCR_DIR@/pgb $h $hx $INTSIG || exit 8
	elif [ "@CATPGB@ " = DEFINED ] ; then
		@LIBS_DIR@/etc/catpgb
	fi
	#
	#  find archive files
	#
	cp sig.ft$hx sigit || exit 8
	mv sigp.ft$hx sigitdt  || exit 8
	cp sfc.ft$hx sfci || exit 8
  #
  h=$hx
#
## incremental interpolation
#
 cp sfci sfci.ft$hx
 STTHOUR=`expr ${ENDHOUR} - ${INCINT} + ${INTPOST} `
 if [ $STTHOUR -lt 10 ] ; then
   STTHOUR=0$STTHOUR
 fi
 if [ $INCINT -eq $ENDHOUR ] ; then
  @RUNSCR_DIR@/pgb 0 ${ENDHOUR} ${INTPOST}  || exit 8
 else
  @RUNSCR_DIR@/pgb ${STTHOUR} ${ENDHOUR} ${INTPOST}  || exit 8
 fi
 
 @LIBS_DIR@/etc/date sigit >dateout$$ || exit 8
 read HH MM DD YYYY FH <dateout$$ ; rm dateout$$
 
 @LIBS_DIR@/etc/incdte \
  $YYYY $MM $DD $HH $FH  >dteout$$ || exit 8
 read YYYYF MMF DDF HHF  <dteout$$ ; rm dteout$$

 PGBSIG=./era40_$YYYYF$MMF$DDF$HHF.p2sig${INCLVS}L
 rm -f sigdif.tmp
 cp pgb.ft$hx tmp.pgb
 cp pgb.ft$hx pgb.ft$hx.org
 @LIBS_DIR@/etc/force_grib_date_mon tmp.pgb $YYYYF$MMF$DDF$HHF
 @RUNSCR_DIR@/p2sig${INCLVS}L tmp.pgb pgb.ft$hx-sig $YYYYF:$MMF:$DDF:$HHF:0 || exit 8
 @RUNSCR_DIR@/sigdif ${PGBSIG} pgb.ft$hx-sig sigdif.tmp || exit 8
 
 if [ -r sigdif.tmp ] ; then
 @RUNSCR_DIR@/sigadd sigdif.tmp sigit sigit.ft$hx || exit 8
 @RUNSCR_DIR@/sigadd sigdif.tmp sigitdt sigitdt.ft$hx || exit 8
 else
  echo No sigdif.tmp
  exit
 fi
 
 cp sigit.ft$hx sigit
 cp sigitdt.ft$hx sigitdt
 mv sig.ft$hx sig.ft$hx.org
 cp sigit.ft$hx sig.ft$hx
 @RUNSCR_DIR@/pgb $hx $hx 1 || exit 8
#
## incremental interpolation in time
#
 if [ $INCINT -gt $INTPOST ] ; then  
   FT=$STTHOUR
   @RUNSCR_DIR@/sigdif sig.ft${hx} sig.ft${hx}.org sigdif_time.tmp || exit 8

   while [ $FT -lt $ENDHOUR ] ; do
     fact=`echo $FT $INCINT | awk '{print ($1%$2)/$2}'`
     cp sig.ft${FT} sig.ft${FT}.org || exit 8
     @RUNSCR_DIR@/sigadd2 sigdif_time.tmp sig.ft${FT}.org sig.ft${FT} $fact || exit 8
     cp pgb.ft${FT} pgb.ft${FT}.org || exit 8
     FT=`expr $FT + $INTPOST`
     if [ $FT -lt 10 ] ; then
       FT=0$FT
     fi
   done
   @RUNSCR_DIR@/pgb $STTHOUR $ENDHOUR $INTPOST || exit 8
 fi
done
if [ @MACHINE@ = mac -a @MARCH@ = mpi ] ; then
        lamclean
        lamhalt
fi


ENDHOUR=`expr $ENDHOUR + $INCINT`

done

